-- RFM Segementation: Recency, Frequency, and Monetary information based Segmentation of Customers

-- Creating the Database
CREATE OR REPLACE DATABASE RFM_SALES;
USE DATABASE RFM_SALES;


CREATE OR REPLACE TABLE SALES_DATA (
    ORDERNUMBER NUMBER (8, 0),
    QUANTITYORDERED NUMBER (8,2),
    PRICEEACH NUMBER (8,2),
    ORDERLINENUMBER NUMBER (3, 0),
    SALES NUMBER (8,2),
    ORDERDATE VARCHAR (16),
    STATUS VARCHAR (16),
    QTR_ID NUMBER (1,0),
    MONTH_ID NUMBER (2,0),
    YEAR_ID NUMBER (4,0),
    PRODUCTLINE VARCHAR (32),
    MSRP NUMBER (8,0),
    PRODUCTCODE VARCHAR (16),
    CUSTOMERNAME VARCHAR (64),
    PHONE VARCHAR (32),
    ADDRESSLINE1 VARCHAR (64),
    ADDRESSLINE2 VARCHAR (64),
    CITY VARCHAR (16),
    STATE VARCHAR (16),
    POSTALCODE VARCHAR (16),
    COUNTRY VARCHAR (24),
    TERRITORY VARCHAR (24),
    CONTACTLASTNAME VARCHAR (16),
    CONTACTFIRSTNAME VARCHAR (16),
    DEALSIZE VARCHAR (10) 
);


SELECT * FROM SALES_DATA;

SELECT TO_DATE(ORDERDATE, 'DD/MM/YYYY') as Date  from SALES_DATA LIMIT 5;

SELECT COUNT(TO_DATE(ORDERDATE, 'DD/MM/YYYY')) as Date_Counts  from SALES_DATA;


DESCRIBE TABLE SALES_DATA;

SELECT * FROM SALES_DATA;

---------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                   -- BASIC ANALYSIS

-- KPI'S 

WITH CTE1 AS (
SELECT COUNT(*) AS TOTAL_RECORDS FROM SALES_DATA),

CTE2 AS (
SELECT COUNT(DISTINCT ORDERNUMBER) AS TOTAL_ORDERS FROM SALES_DATA),

CTE3 AS (
SELECT SUM(QUANTITYORDERED) AS TOTAL_QUANTITY_SOLD FROM SALES_DATA),

CTE4 AS (
SELECT ROUND(SUM(SALES), 2) AS TOTAL_SALES FROM SALES_DATA)

SELECT C1.*, C2.*, C3.*, C4.* FROM CTE1 C1
CROSS JOIN CTE2 C2
CROSS JOIN CTE3 C3
CROSS JOIN CTE4 C4;



-- LOOKING OUT THE UNIQUE VALUES IN THE CATERGORICAL COLUMNS

SELECT DISTINCT STATUS FROM SALES_DATA;
SELECT DISTINCT YEAR_ID FROM SALES_DATA;
SELECT DISTINCT PRODUCTLINE FROM SALES_DATA;
SELECT DISTINCT CUSTOMERNAME FROM SALES_DATA;
SELECT DISTINCT COUNTRY FROM SALES_DATA;
SELECT DISTINCT DEALSIZE FROM SALES_DATA;



-- GROUP BY TOTAL_SALES

SELECT STATUS, ROUND(SUM(SALES), 2) AS TOTAL_SALES
FROM SALES_DATA
GROUP BY 1
ORDER BY 2 DESC;


SELECT YEAR_ID, ROUND(SUM(SALES), 2) AS TOTAL_SALES
FROM SALES_DATA
GROUP BY 1
ORDER BY 2 DESC;


SELECT PRODUCTLINE, ROUND(SUM(SALES), 2) AS TOTAL_SALES
FROM SALES_DATA
GROUP BY 1
ORDER BY 2 DESC;


SELECT COUNTRY, ROUND(SUM(SALES), 2) AS TOTAL_SALES
FROM SALES_DATA
GROUP BY 1
ORDER BY 2 DESC;


SELECT DEALSIZE, ROUND(SUM(SALES), 2) AS TOTAL_SALES
FROM SALES_DATA
GROUP BY 1
ORDER BY 2 DESC;



-- FINDING THE TOP 10 CUSTOMERS BASED ON TRANSACTION

WITH CTE1 AS (
SELECT CUSTOMERNAME, DATEDIFF('DAY', MIN(TO_DATE(ORDERDATE, 'DD/MM/YYYY')), MAX(TO_DATE(ORDERDATE, 'DD/MM/YYYY'))) + 1 AS RANGE_OF_TRANSACTION
FROM SALES_DATA
GROUP BY 1),

CTE2 AS (
SELECT *, ROW_NUMBER() OVER(ORDER BY RANGE_OF_TRANSACTION ASC, CUSTOMERNAME ASC) AS RANKING
FROM CTE1)

SELECT * FROM CTE2
WHERE RANKING <= 10;


-- FINDING THE TOP 10 CUSTOMERS BASED ON FREQUENCY

WITH CTE1 AS (
SELECT CUSTOMERNAME, COUNT(DISTINCT ORDERNUMBER) AS TOTAL_ORDERS
FROM SALES_DATA
GROUP BY 1), 

CTE2 AS (
SELECT *, ROW_NUMBER() OVER(ORDER BY TOTAL_ORDERS DESC, CUSTOMERNAME ASC) AS RANKING
FROM CTE1)

SELECT * FROM CTE2
WHERE RANKING <= 10;

-- FINDING THE TOP 10 CUSTOMERS BASED ON MONETARY VALUE

WITH CTE1 AS (
SELECT CUSTOMERNAME, ROUND(SUM(SALES), 2) AS TOTAL_SALES
FROM SALES_DATA
GROUP BY 1),

CTE2 AS (
SELECT *, ROW_NUMBER() OVER(ORDER BY TOTAL_SALES DESC, CUSTOMERNAME ASC) AS RANKING
FROM CTE1)

SELECT * FROM CTE2
WHERE RANKING <= 10;











---------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                   -- RFM SEGMENTATION
CREATE OR REPLACE VIEW RFM_SEGMENTATION AS
WITH CTE1 AS (
SELECT CUSTOMERNAME AS CUSTOMER_NAME,
       COUNT(DISTINCT ORDERNUMBER) AS FREQUENCY,
       ROUND(SUM(SALES), 2) AS MONETARY_VALUE,
       MAX(TO_DATE(ORDERDATE, 'DD/MM/YYYY')) AS LAST_ORDER_DATE,
       (SELECT MAX(TO_DATE(ORDERDATE, 'DD/MM/YYYY')) FROM SALES_DATA) AS FINAL_DATE,
       CITY,
       COUNTRY
FROM SALES_DATA
GROUP BY 1, 6, 7
),

CTE2 AS (
SELECT *,
       DATEDIFF('DAY', LAST_ORDER_DATE, FINAL_DATE) + 1 AS RECENCY
FROM CTE1
),

CTE3 AS (
SELECT *,
       NTILE(4) OVER(ORDER BY RECENCY DESC) AS RECENCY_SCORE,
       NTILE(4) OVER(ORDER BY FREQUENCY) AS FREQUENCY_SCORE,
       NTILE(4) OVER(ORDER BY MONETARY_VALUE) AS MONETARY_SCORE
FROM CTE2),

CTE4 AS (
SELECT *,
       CONCAT(RECENCY_SCORE, FREQUENCY_SCORE, MONETARY_SCORE) AS RFM_SCORE
FROM CTE3
)

SELECT *,
       CASE WHEN RFM_SCORE IN ('414', '314','424','434','444','324','334') THEN 'LOYAL CUSTOMERS'
            WHEN RFM_SCORE IN ('113', '124', '214') THEN 'POTENTIAL CHURNERS'
            WHEN RFM_SCORE IN ('411', '422') THEN 'NEW CUSTOMERS'
            WHEN RFM_SCORE IN ('314', '244') THEN 'BIG SPENDERS'
            WHEN RFM_SCORE IN ('134', '244') THEN 'CAN’T LOSE THEM'
            ELSE 'OTHER’S'
      END AS SEGMENT
FROM CTE4;


SELECT *
FROM RFM_SEGMENTATION;